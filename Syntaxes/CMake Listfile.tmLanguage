<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>CMakeLists.txt</string>
		<string>cmake</string>
	</array>
	<key>foldingStartMarker</key>
	<string>/\*\*|\{\s*$</string>
	<key>foldingStopMarker</key>
	<string>\*\*/|^\s*\}</string>
	<key>keyEquivalent</key>
	<string>^~C</string>
	<key>name</key>
	<string>CMake Listfile</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>begin</key>
			<string>(?ix)
			^\s*	# Start of the line with optional preceding space
			(?:	# Either a control flow keyword
				((?:end)?(?:if|while|foreach|else)|return)
				|	# Or a function
				(s(?:tring|ite_name|ource_group|ubdir(?:s|_depends)|e(?:t(?:_(?:source_files_properties|t(?:ests_properties|arget_properties)|directory_properties|property))?|parate_arguments))|c(?:onfigure_file|reate_test_sourcelist|make(?:_(?:policy|minimum_required)| version 2.6-patch 0))|t(?:arget_link_libraries|ry_(?:compile|run))|i(?:n(?:stall(?:_(?:targets|programs|files))?|clude(?:_(?:directories|external_msproject|regular_expression))?)|f)|o(?:utput_required_files|ption)|define_property|u(?:se_mangled_mesa|tility_source)|project|e(?:n(?:d(?:if|f(?:oreach|unction)|while|macro)|able_(?:testing|language))|lse(?:if)?|x(?:port(?:_library_dependencies)?|ec(?:_program|ute_process)))|variable_(?:watch|requires)|qt_wrap_(?:cpp|ui)|f(?:i(?:nd_(?:p(?:a(?:ckage|th)|rogram)|file|library)|le)|oreach|unction|ltk_wrap_ui)|w(?:hile|rite_file)|l(?:i(?:st|nk_(?:directories|libraries))|oad_c(?:ommand|ache))|a(?:dd_(?:subdirectory|custom_(?:command|target)|test|de(?:pendencies|finitions)|executable|library)|ux_source_directory)|re(?:turn|move(?:_definitions)?)|get_(?:source_file_property|cmake_property|t(?:est_property|arget_property)|directory_property|property|filename_component)|m(?:essage|a(?:cro|th|ke_directory|rk_as_advanced))|b(?:uild_(?:name|command)|reak))
				|	# Or some function we donâ€™t know about
				(\w+)
			)
			\s*(\()	# Finally, the opening parenthesis for the argument list
			</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.cmake</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>support.function.cmake</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.begin.command.cmake</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>The command list is simply generated with:
				cmake --help-command-list | ruby /Library/Application\ Support/TextMate/Bundles/Objective-C.tmbundle/Support/list_to_regexp.rb | pbcopy</string>
			<key>end</key>
			<string>(\))</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.end.command.cmake</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.function-call.command.cmake</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#argument-constants</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#items</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>include</key>
			<string>#items</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>argument-constants</key>
		<dict>
			<key>match</key>
			<string>(?i)\b(MACOSX_BUNDLE|FRAMEWORK|GLOB(_RECURSE)?|PROPERTIES|VERSION)\b</string>
			<key>name</key>
			<string>keyword.other.argument-separator.cmake</string>
		</dict>
		<key>comments</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.cmake</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(#).*$\n?</string>
			<key>name</key>
			<string>comment.line.number-sign.cmake</string>
		</dict>
		<key>constants</key>
		<dict>
			<key>match</key>
			<string>(?i)\b(FALSE|OFF|NO|\w+-NOTFOUND)\b</string>
			<key>name</key>
			<string>constant.language.boolean.cmake</string>
		</dict>
		<key>items</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#constants</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#strings</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#variables</string>
				</dict>
			</array>
		</dict>
		<key>strings</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>constant.language.boolean.cmake</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?i)"(FALSE|OFF|NO|.+-NOTFOUND)"</string>
					<key>name</key>
					<string>string.quoted.double.cmake</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>"</string>
					<key>end</key>
					<string>"</string>
					<key>name</key>
					<string>string.quoted.double.cmake</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\\"</string>
							<key>name</key>
							<string>constant.character.escape.cmake</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#variables</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>variables</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.variable.begin.cmake</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.variable.end.cmake</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(\$(ENV)?\{)\w+(\})</string>
			<key>name</key>
			<string>variable.cmake</string>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.cmake</string>
	<key>uuid</key>
	<string>6E939107-5C78-455D-A7E6-1107ADC777C2</string>
</dict>
</plist>
